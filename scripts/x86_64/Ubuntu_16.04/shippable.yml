resources:
  - name: u16microbase_dd_repo
    type: gitRepo
    integration: avinci_gh
    versionTemplate:
      sourceName: "dry-dock/u16microbase"
      branch: master

  - name: u16microbase_dd_img
    type: image
    integration: shipDH
    versionTemplate:
      sourceName: "drydock/u16microbase"
      versionName: master

  - name: u16admiral_sh_repo
    type: gitRepo
    integration: avinci_gh
    versionTemplate:
      sourceName: "shippable/admiral"
      branch: master

  - name: u16admiral_sh_img
    type: image
    integration: ecr_bits_push
    versionTemplate:
      sourceName: "374168611083.dkr.ecr.us-east-1.amazonaws.com/u16admiral"
      versionName: master

  - name: nexec_sh_repo
    type: gitRepo
    integration: avinci_gh
    versionTemplate:
      sourceName: shippable/nexec
      branch: master

  - name: nexec_sh_img
    type: image
    integration: ecr_bits_push
    versionTemplate:
      sourceName: "374168611083.dkr.ecr.us-east-1.amazonaws.com/nexec"
      versionName: master

  - name: mktg_sh_repo
    type: gitRepo
    integration: avinci_gh
    versionTemplate:
      sourceName: "shippable/mktg"
      branch: master

  - name: mktg_sh_img
    type: image
    integration: ecr_bits_push
    versionTemplate:
      sourceName: "374168611083.dkr.ecr.us-east-1.amazonaws.com/mktg"
      versionName: master

  - name: api_sh_repo
    type: gitRepo
    integration: avinci_gh
    versionTemplate:
      sourceName: "shippable/api"
      branch: master

  - name: api_sh_img
    type: image
    integration: ecr_bits_push
    versionTemplate:
      sourceName: "374168611083.dkr.ecr.us-east-1.amazonaws.com/api"
      versionName: master

  - name: www_sh_repo
    type: gitRepo
    integration: avinci_gh
    versionTemplate:
      sourceName: "shippable/www"
      branch: master

  - name: www_sh_img
    type: image
    integration: ecr_bits_push
    versionTemplate:
      sourceName: "374168611083.dkr.ecr.us-east-1.amazonaws.com/www"
      versionName: master

jobs:
  - name: u16microbase_x8664_build
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: u16microbase_dd_repo
      - IN: u16_dd_img
      - TASK:
          name: u16microbase_build
          runtime:
            options:
              env:
                - IMG_BASE: "u16_dd_img"
                - IMG_OUT: "u16microbase_dd_img"
                - RES_REPO: "u16microbase_dd_repo"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$IMG_BASE" "versionName")
            - REPO_COMMIT=$(shipctl get_resource_version_key "$RES_REPO" "shaData.commitSha")
            - IMG_NAME=$(shipctl get_resource_version_key $IMG_OUT "sourceName")
            - DH_USR_NAME=$(shipctl get_integration_resource_field $IMG_OUT "userName")
            - DH_PASS=$(shipctl get_integration_resource_field $IMG_OUT "password")
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - docker build -t=$IMG_NAME:$REL_VER --pull .
            - docker login -u $DH_USR_NAME -p $DH_PASS
            - docker push $IMG_NAME:$REL_VER
      - OUT: u16microbase_dd_img
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT"
        - shipctl put_resource_state_multi $IMG_OUT "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT" "BUILD_NUMBER=$BUILD_NUMBER"

  - name: u16admiral_x8664_build
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: u16admiral_sh_repo
      - IN: u16microbase_dd_img
      - IN: shipit_bits_access_cli
        switch: off
        scopes:
          - ecr
      - TASK:
          name: u16admiral_build
          runtime:
            options:
              env:
                - IMG_BASE: "u16microbase_dd_img"
                - IMG_OUT: "u16admiral_sh_img"
                - RES_REPO: "u16admiral_sh_repo"
                - IMG: "u16admiral"
                - ADMIRAL_OS: "16"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$IMG_BASE" "versionName")
            - REPO_COMMIT=$(shipctl get_resource_version_key "$RES_REPO" "shaData.commitSha")
            - IMG_NAME=$(shipctl get_resource_version_key $IMG_OUT "sourceName")
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - shipctl replace Dockerfile
            - docker build -t=$IMG_NAME:$REL_VER --pull .
            - docker push $IMG_NAME:$REL_VER
            - aws ecr list-images --repository-name $IMG --query 'imageIds[?type(imageTag)!=`string`].[imageDigest]' --output text | while read line; do aws ecr batch-delete-image --repository-name $IMG --image-ids imageDigest=$line; done
      - OUT: u16admiral_sh_img
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT"
        - shipctl put_resource_state_multi $IMG_OUT "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT" "BUILD_NUMBER=$BUILD_NUMBER"

  - name: u16mktg_x8664_build
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: mktg_sh_repo
      - IN: u16microbase_dd_img
      - IN: shipit_bits_access_cli
        switch: off
        scopes:
          - ecr
      - TASK:
          name: u16mktg_build
          runtime:
            options:
              env:
                - IMG_BASE: "u16microbase_dd_img"
                - IMG_OUT: "mktg_sh_img"
                - RES_REPO: "mktg_sh_repo"
                - IMG: "u16admiral"
                - ADMIRAL_OS: "16"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$IMG_BASE" "versionName")
            - REPO_COMMIT=$(shipctl get_resource_version_key "$RES_REPO" "shaData.commitSha")
            - IMG_NAME=$(shipctl get_resource_version_key $IMG_OUT "sourceName")
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - docker build -t=$IMG_NAME:$REL_VER --pull .
            - docker push $IMG_NAME:$REL_VER
            - aws ecr list-images --repository-name $IMG --query 'imageIds[?type(imageTag)!=`string`].[imageDigest]' --output text | while read line; do aws ecr batch-delete-image --repository-name $IMG --image-ids imageDigest=$line; done
      - OUT: mktg_sh_img
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT"
        - shipctl put_resource_state_multi $IMG_OUT "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT" "BUILD_NUMBER=$BUILD_NUMBER"

  - name: u16www_x8664_build
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: www_sh_repo
      - IN: u16microbase_dd_img
      - IN: shipit_bits_access_cli
        switch: off
        scopes:
          - ecr
      - TASK:
          name: u16www_build
          runtime:
            options:
              env:
                - IMG_BASE: "u16microbase_dd_img"
                - IMG_OUT: "www_sh_img"
                - RES_REPO: "www_sh_repo"
                - IMG: "u16admiral"
                - ADMIRAL_OS: "16"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$IMG_BASE" "versionName")
            - REPO_COMMIT=$(shipctl get_resource_version_key "$RES_REPO" "shaData.commitSha")
            - IMG_NAME=$(shipctl get_resource_version_key $IMG_OUT "sourceName")
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - docker build -t=$IMG_NAME:$REL_VER --pull .
            - docker push $IMG_NAME:$REL_VER
            - aws ecr list-images --repository-name $IMG --query 'imageIds[?type(imageTag)!=`string`].[imageDigest]' --output text | while read line; do aws ecr batch-delete-image --repository-name $IMG --image-ids imageDigest=$line; done
      - OUT: www_sh_img
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT"
        - shipctl put_resource_state_multi $IMG_OUT "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT" "BUILD_NUMBER=$BUILD_NUMBER"

  - name: u16api_x8664_build
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: api_sh_repo
      - IN: u16microbase_dd_img
      - IN: shipit_bits_access_cli
        switch: off
        scopes:
          - ecr
      - TASK:
          name: u16api_build
          runtime:
            options:
              env:
                - IMG_BASE: "u16microbase_dd_img"
                - IMG_OUT: "api_sh_img"
                - RES_REPO: "api_sh_repo"
                - IMG: "u16admiral"
                - ADMIRAL_OS: "16"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$IMG_BASE" "versionName")
            - REPO_COMMIT=$(shipctl get_resource_version_key "$RES_REPO" "shaData.commitSha")
            - IMG_NAME=$(shipctl get_resource_version_key $IMG_OUT "sourceName")
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - docker build -t=$IMG_NAME:$REL_VER --pull --no-cache .
            - docker push $IMG_NAME:$REL_VER
            - aws ecr list-images --repository-name $IMG --query 'imageIds[?type(imageTag)!=`string`].[imageDigest]' --output text | while read line; do aws ecr batch-delete-image --repository-name $IMG --image-ids imageDigest=$line; done
      - OUT: api_sh_img
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT"
        - shipctl put_resource_state_multi $IMG_OUT "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT" "BUILD_NUMBER=$BUILD_NUMBER"

  - name: u16nexec_x8664_build
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: nexec_sh_repo
      - IN: u16microbase_dd_img
      - IN: shipit_bits_access_cli
        switch: off
        scopes:
          - ecr
      - TASK:
          name: u16nexec_build
          runtime:
            options:
              env:
                - IMG_BASE: "u16microbase_dd_img"
                - IMG_OUT: "nexec_sh_img"
                - RES_REPO: "nexec_sh_repo"
                - IMG: "u16admiral"
                - ADMIRAL_OS: "16"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$IMG_BASE" "versionName")
            - REPO_COMMIT=$(shipctl get_resource_version_key "$RES_REPO" "shaData.commitSha")
            - IMG_NAME=$(shipctl get_resource_version_key $IMG_OUT "sourceName")
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - docker build -t=$IMG_NAME:$REL_VER --pull .
            - docker push $IMG_NAME:$REL_VER
            - aws ecr list-images --repository-name $IMG --query 'imageIds[?type(imageTag)!=`string`].[imageDigest]' --output text | while read line; do aws ecr batch-delete-image --repository-name $IMG --image-ids imageDigest=$line; done
      - OUT: nexec_sh_img
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT"
        - shipctl put_resource_state_multi $IMG_OUT "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT" "BUILD_NUMBER=$BUILD_NUMBER"

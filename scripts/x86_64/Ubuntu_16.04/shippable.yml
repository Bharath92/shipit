resources:
  - name: u16microbase_dd_repo
    type: gitRepo
    integration: avinci_gh
    versionTemplate:
      sourceName: "dry-dock/u16microbase"
      branch: master

  - name: u16microbase_dd_img
    type: image
    integration: shipDH
    versionTemplate:
      sourceName: "drydock/u16microbase"
      versionName: master

  - name: u16admiral_sh_img
    type: image
    integration: ecr_bits_push
    versionTemplate:
      sourceName: "374168611083.dkr.ecr.us-east-1.amazonaws.com/u16admiral"
      versionName: master

  - name: execTemplates_sh_repo
    type: gitRepo
    integration: avinci_gh
    versionTemplate:
      sourceName: shippable/execTemplates
      branch: master

  - name: node_sh_repo
    type: gitRepo
    integration: avinci_gh
    versionTemplate:
      sourceName: shippable/node
      branch: master

  - name: cexec_sh_repo
    type: gitRepo
    integration: avinci_gh
    versionTemplate:
      sourceName: shippable/cexec
      branch: master

  - name: reqExec_sh_repo
    type: gitRepo
    integration: avinci_gh
    versionTemplate:
      sourceName: shippable/reqExec
      branch: master

  - name: reqProc_sh_repo
    type: gitRepo
    integration: avinci_gh
    versionTemplate:
      sourceName: shippable/reqProc
      branch: master

  - name: reqKick_sh_repo
    type: gitRepo
    integration: avinci_gh
    versionTemplate:
      sourceName: shippable/reqKick
      branch: master

  - name: nexec_sh_repo
    type: gitRepo
    integration: avinci_gh
    versionTemplate:
      sourceName: shippable/nexec
      branch: master

  - name: nexec_sh_img
    type: image
    integration: ecr_bits_push
    versionTemplate:
      sourceName: "374168611083.dkr.ecr.us-east-1.amazonaws.com/nexec"
      versionName: master

  - name: mktg_sh_repo
    type: gitRepo
    integration: avinci_gh
    versionTemplate:
      sourceName: "shippable/mktg"
      branch: master

  - name: mktg_sh_img
    type: image
    integration: ecr_bits_push
    versionTemplate:
      sourceName: "374168611083.dkr.ecr.us-east-1.amazonaws.com/mktg"
      versionName: master

  - name: api_sh_repo
    type: gitRepo
    integration: avinci_gh
    versionTemplate:
      sourceName: "shippable/api"
      branch: master

  - name: api_sh_img
    type: image
    integration: ecr_bits_push
    versionTemplate:
      sourceName: "374168611083.dkr.ecr.us-east-1.amazonaws.com/api"
      versionName: master

  - name: www_sh_repo
    type: gitRepo
    integration: avinci_gh
    versionTemplate:
      sourceName: "shippable/www"
      branch: master

  - name: www_sh_img
    type: image
    integration: ecr_bits_push
    versionTemplate:
      sourceName: "374168611083.dkr.ecr.us-east-1.amazonaws.com/www"
      versionName: master

jobs:
  - name: u16microbase_x8664_build
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: u16microbase_dd_repo
      - IN: u16_dd_img
      - TASK:
          name: u16microbase_build
          runtime:
            options:
              env:
                - IMG_BASE: "u16_dd_img"
                - IMG_OUT: "u16microbase_dd_img"
                - RES_REPO: "u16microbase_dd_repo"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$IMG_BASE" "versionName")
            - REPO_COMMIT=$(shipctl get_resource_version_key "$RES_REPO" "shaData.commitSha")
            - IMG_NAME=$(shipctl get_resource_version_key $IMG_OUT "sourceName")
            - DH_USR_NAME=$(shipctl get_integration_resource_field $IMG_OUT "userName")
            - DH_PASS=$(shipctl get_integration_resource_field $IMG_OUT "password")
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - docker build -t=$IMG_NAME:$REL_VER --pull --no-cache .
            - docker login -u $DH_USR_NAME -p $DH_PASS
            - docker push $IMG_NAME:$REL_VER
      - OUT: u16microbase_dd_img
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT"
        - shipctl put_resource_state_multi $IMG_OUT "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT" "BUILD_NUMBER=$BUILD_NUMBER"

  - name: u16admiral_x8664_build
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: admiral_sh_repo
      - IN: u16microbase_dd_img
      - IN: shipit_bits_access_cli
        switch: off
        scopes:
          - ecr
      - TASK:
          name: u16admiral_build
          runtime:
            options:
              env:
                - IMG_BASE: "u16microbase_dd_img"
                - IMG_OUT: "u16admiral_sh_img"
                - RES_REPO: "admiral_sh_repo"
                - IMG: "u16admiral"
                - ADMIRAL_OS: "16"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$IMG_BASE" "versionName")
            - REPO_COMMIT=$(shipctl get_resource_version_key "$RES_REPO" "shaData.commitSha")
            - IMG_NAME=$(shipctl get_resource_version_key $IMG_OUT "sourceName")
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - shipctl replace Dockerfile
            - docker build -t=$IMG_NAME:$REL_VER --pull --no-cache .
            - docker push $IMG_NAME:$REL_VER
            - aws ecr list-images --repository-name $IMG --query 'imageIds[?type(imageTag)!=`string`].[imageDigest]' --output text | while read line; do aws ecr batch-delete-image --repository-name $IMG --image-ids imageDigest=$line; done
      - OUT: u16admiral_sh_img
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT"
        - shipctl put_resource_state_multi $IMG_OUT "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT" "BUILD_NUMBER=$BUILD_NUMBER"

  - name: u16mktg_x8664_build
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: mktg_sh_repo
      - IN: u16microbase_dd_img
      - IN: shipit_bits_access_cli
        switch: off
        scopes:
          - ecr
      - TASK:
          name: u16mktg_build
          runtime:
            options:
              env:
                - IMG_BASE: "u16microbase_dd_img"
                - IMG_OUT: "mktg_sh_img"
                - RES_REPO: "mktg_sh_repo"
                - IMG: "u16admiral"
                - ADMIRAL_OS: "16"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$IMG_BASE" "versionName")
            - REPO_COMMIT=$(shipctl get_resource_version_key "$RES_REPO" "shaData.commitSha")
            - IMG_NAME=$(shipctl get_resource_version_key $IMG_OUT "sourceName")
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - docker build -t=$IMG_NAME:$REL_VER --pull --no-cache .
            - docker push $IMG_NAME:$REL_VER
            - aws ecr list-images --repository-name $IMG --query 'imageIds[?type(imageTag)!=`string`].[imageDigest]' --output text | while read line; do aws ecr batch-delete-image --repository-name $IMG --image-ids imageDigest=$line; done
      - OUT: mktg_sh_img
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT"
        - shipctl put_resource_state_multi $IMG_OUT "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT" "BUILD_NUMBER=$BUILD_NUMBER"

  - name: u16www_x8664_build
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: www_sh_repo
      - IN: u16microbase_dd_img
      - IN: shipit_bits_access_cli
        switch: off
        scopes:
          - ecr
      - TASK:
          name: u16www_build
          runtime:
            options:
              env:
                - IMG_BASE: "u16microbase_dd_img"
                - IMG_OUT: "www_sh_img"
                - RES_REPO: "www_sh_repo"
                - IMG: "u16admiral"
                - ADMIRAL_OS: "16"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$IMG_BASE" "versionName")
            - REPO_COMMIT=$(shipctl get_resource_version_key "$RES_REPO" "shaData.commitSha")
            - IMG_NAME=$(shipctl get_resource_version_key $IMG_OUT "sourceName")
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - docker build -t=$IMG_NAME:$REL_VER --pull --no-cache .
            - docker push $IMG_NAME:$REL_VER
            - aws ecr list-images --repository-name $IMG --query 'imageIds[?type(imageTag)!=`string`].[imageDigest]' --output text | while read line; do aws ecr batch-delete-image --repository-name $IMG --image-ids imageDigest=$line; done
      - OUT: www_sh_img
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT"
        - shipctl put_resource_state_multi $IMG_OUT "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT" "BUILD_NUMBER=$BUILD_NUMBER"

  - name: u16api_x8664_build
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: api_sh_repo
      - IN: u16microbase_dd_img
      - IN: shipit_bits_access_cli
        switch: off
        scopes:
          - ecr
      - TASK:
          name: u16api_build
          runtime:
            options:
              env:
                - IMG_BASE: "u16microbase_dd_img"
                - IMG_OUT: "api_sh_img"
                - RES_REPO: "api_sh_repo"
                - IMG: "u16admiral"
                - ADMIRAL_OS: "16"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$IMG_BASE" "versionName")
            - REPO_COMMIT=$(shipctl get_resource_version_key "$RES_REPO" "shaData.commitSha")
            - IMG_NAME=$(shipctl get_resource_version_key $IMG_OUT "sourceName")
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - docker build -t=$IMG_NAME:$REL_VER --pull --no-cache .
            - docker push $IMG_NAME:$REL_VER
            - aws ecr list-images --repository-name $IMG --query 'imageIds[?type(imageTag)!=`string`].[imageDigest]' --output text | while read line; do aws ecr batch-delete-image --repository-name $IMG --image-ids imageDigest=$line; done
      - OUT: api_sh_img
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT"
        - shipctl put_resource_state_multi $IMG_OUT "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT" "BUILD_NUMBER=$BUILD_NUMBER"

  - name: u16nexec_x8664_build
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: nexec_sh_repo
      - IN: u16microbase_dd_img
      - IN: shipit_bits_access_cli
        switch: off
        scopes:
          - ecr
      - TASK:
          name: u16nexec_build
          runtime:
            options:
              env:
                - IMG_BASE: "u16microbase_dd_img"
                - IMG_OUT: "nexec_sh_img"
                - RES_REPO: "nexec_sh_repo  "
                - IMG: "u16admiral"
                - ADMIRAL_OS: "16"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$IMG_BASE" "versionName")
            - REPO_COMMIT=$(shipctl get_resource_version_key "$RES_REPO" "shaData.commitSha")
            - IMG_NAME=$(shipctl get_resource_version_key $IMG_OUT "sourceName")
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - docker build -t=$IMG_NAME:$REL_VER --pull --no-cache .
            - docker push $IMG_NAME:$REL_VER
            - aws ecr list-images --repository-name $IMG --query 'imageIds[?type(imageTag)!=`string`].[imageDigest]' --output text | while read line; do aws ecr batch-delete-image --repository-name $IMG --image-ids imageDigest=$line; done
      - OUT: nexec_sh_img
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT"
        - shipctl put_resource_state_multi $IMG_OUT "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT" "BUILD_NUMBER=$BUILD_NUMBER"

  - name: u16_x8664_tag
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: prod_release
      - IN: u16_dd_repo
        switch: off
      - IN: u16_dd_img
        switch: off
      - IN: shipit_gh_ssh
        switch: off
      - TASK:
          name: u16_tag
          runtime:
            options:
              env:
                - RES_VER: "prod_release"
                - RES_IMG: "u16_dd_img"
                - RES_REPO: "u16_dd_repo"
                - GIT_PATH: "git@github.com:dry-dock/u16.git"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$RES_VER" "versionName")
            - |
               REPO_COMMIT=$(shipctl get_resource_version_key "$RES_IMG" "IMG_REPO_COMMIT_SHA")
               IMG_NAME=$(shipctl get_resource_version_key "$RES_IMG" "sourceName")
               UP_IMG_TAG=$(shipctl get_resource_version_key "$RES_IMG" "versionName")
               DH_USR_NAME=$(shipctl get_integration_resource_field "$RES_IMG" "userName")
               DH_PASS=$(shipctl get_integration_resource_field "$RES_IMG" "password")
            - |
               pushd $(shipctl get_resource_meta "shipit_gh_ssh")
                 cat "integration.json"  | jq -r '.privateKey' > gh_ssh.key
                 chmod 600 gh_ssh.key
                 ssh-add gh_ssh.key
               popd
            - docker login -u $DH_USR_NAME -p $DH_PASS
            - docker pull "$IMG_NAME:$UP_IMG_TAG"
            - |
               docker tag "$IMG_NAME:$UP_IMG_TAG" "$IMG_NAME:$REL_VER"
               docker push "$IMG_NAME:$REL_VER"
            - |
               docker tag "$IMG_NAME:$UP_IMG_TAG" "$IMG_NAME:latest"
               docker push "$IMG_NAME:latest"
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - |
               git remote add up $GIT_PATH
               git remote -v
               git checkout master
            - |
               git pull --tags
               if git tag -d $REL_VER; then
                 git push --delete up $REL_VER
               fi
            - |
               git checkout $REPO_COMMIT
               git tag $REL_VER
               git push up $REL_VER
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "TAG_COMMIT_SHA=$REPO_COMMIT" "TAG_IMG=$REL_VER"

  - name: u16all_x8664_tag
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: prod_release
      - IN: u16all_dd_repo
        switch: off
      - IN: u16all_dd_img
        switch: off
      - IN: shipit_gh_ssh
        switch: off
      - TASK:
          name: u16all_tag
          runtime:
            options:
              env:
                - RES_VER: "prod_release"
                - RES_IMG: "u16all_dd_img"
                - RES_REPO: "u16all_dd_repo"
                - GIT_PATH: "git@github.com:dry-dock/u16all.git"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$RES_VER" "versionName")
            - |
               REPO_COMMIT=$(shipctl get_resource_version_key "$RES_IMG" "IMG_REPO_COMMIT_SHA")
               IMG_NAME=$(shipctl get_resource_version_key "$RES_IMG" "sourceName")
               UP_IMG_TAG=$(shipctl get_resource_version_key "$RES_IMG" "versionName")
               DH_USR_NAME=$(shipctl get_integration_resource_field "$RES_IMG" "userName")
               DH_PASS=$(shipctl get_integration_resource_field "$RES_IMG" "password")
            - |
               pushd $(shipctl get_resource_meta "shipit_gh_ssh")
                 cat "integration.json"  | jq -r '.privateKey' > gh_ssh.key
                 chmod 600 gh_ssh.key
                 ssh-add gh_ssh.key
               popd
            - docker login -u $DH_USR_NAME -p $DH_PASS
            - docker pull "$IMG_NAME:$UP_IMG_TAG"
            - |
               docker tag "$IMG_NAME:$UP_IMG_TAG" "$IMG_NAME:$REL_VER"
               docker push "$IMG_NAME:$REL_VER"
            - |
               docker tag "$IMG_NAME:$UP_IMG_TAG" "$IMG_NAME:latest"
               docker push "$IMG_NAME:latest"
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - |
               git remote add up $GIT_PATH
               git remote -v
               git checkout master
            - |
               git pull --tags
               if git tag -d $REL_VER; then
                 git push --delete up $REL_VER
               fi
            - |
               git checkout $REPO_COMMIT
               git tag $REL_VER
               git push up $REL_VER
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "TAG_COMMIT_SHA=$REPO_COMMIT" "TAG_IMG=$REL_VER"

  - name: u16nodall_x8664_tag
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: prod_release
      - IN: u16nodall_dd_repo
        switch: off
      - IN: u16nodall_dd_img
        switch: off
      - IN: shipit_gh_ssh
        switch: off
      - TASK:
          name: u16nodall_tag
          runtime:
            options:
              env:
                - RES_VER: "prod_release"
                - RES_IMG: "u16nodall_dd_img"
                - RES_REPO: "u16nodall_dd_repo"
                - GIT_PATH: "git@github.com:dry-dock/u16nodall.git"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$RES_VER" "versionName")
            - |
               REPO_COMMIT=$(shipctl get_resource_version_key "$RES_IMG" "IMG_REPO_COMMIT_SHA")
               IMG_NAME=$(shipctl get_resource_version_key "$RES_IMG" "sourceName")
               UP_IMG_TAG=$(shipctl get_resource_version_key "$RES_IMG" "versionName")
               DH_USR_NAME=$(shipctl get_integration_resource_field "$RES_IMG" "userName")
               DH_PASS=$(shipctl get_integration_resource_field "$RES_IMG" "password")
            - |
               pushd $(shipctl get_resource_meta "shipit_gh_ssh")
                 cat "integration.json"  | jq -r '.privateKey' > gh_ssh.key
                 chmod 600 gh_ssh.key
                 ssh-add gh_ssh.key
               popd
            - docker login -u $DH_USR_NAME -p $DH_PASS
            - docker pull "$IMG_NAME:$UP_IMG_TAG"
            - |
               docker tag "$IMG_NAME:$UP_IMG_TAG" "$IMG_NAME:$REL_VER"
               docker push "$IMG_NAME:$REL_VER"
            - |
               docker tag "$IMG_NAME:$UP_IMG_TAG" "$IMG_NAME:latest"
               docker push "$IMG_NAME:latest"
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - |
               git remote add up $GIT_PATH
               git remote -v
               git checkout master
            - |
               git pull --tags
               if git tag -d $REL_VER; then
                 git push --delete up $REL_VER
               fi
            - |
               git checkout $REPO_COMMIT
               git tag $REL_VER
               git push up $REL_VER
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "TAG_COMMIT_SHA=$REPO_COMMIT" "TAG_IMG=$REL_VER"

  - name: u16pytall_x8664_tag
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: prod_release
      - IN: u16pytall_dd_repo
        switch: off
      - IN: u16pytall_dd_img
        switch: off
      - IN: shipit_gh_ssh
        switch: off
      - TASK:
          name: u16pytall_tag
          runtime:
            options:
              env:
                - RES_VER: "prod_release"
                - RES_IMG: "u16pytall_dd_img"
                - RES_REPO: "u16pytall_dd_repo"
                - GIT_PATH: "git@github.com:dry-dock/u16pytall.git"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$RES_VER" "versionName")
            - |
               REPO_COMMIT=$(shipctl get_resource_version_key "$RES_IMG" "IMG_REPO_COMMIT_SHA")
               IMG_NAME=$(shipctl get_resource_version_key "$RES_IMG" "sourceName")
               UP_IMG_TAG=$(shipctl get_resource_version_key "$RES_IMG" "versionName")
               DH_USR_NAME=$(shipctl get_integration_resource_field "$RES_IMG" "userName")
               DH_PASS=$(shipctl get_integration_resource_field "$RES_IMG" "password")
            - |
               pushd $(shipctl get_resource_meta "shipit_gh_ssh")
                 cat "integration.json"  | jq -r '.privateKey' > gh_ssh.key
                 chmod 600 gh_ssh.key
                 ssh-add gh_ssh.key
               popd
            - docker login -u $DH_USR_NAME -p $DH_PASS
            - docker pull "$IMG_NAME:$UP_IMG_TAG"
            - |
               docker tag "$IMG_NAME:$UP_IMG_TAG" "$IMG_NAME:$REL_VER"
               docker push "$IMG_NAME:$REL_VER"
            - |
               docker tag "$IMG_NAME:$UP_IMG_TAG" "$IMG_NAME:latest"
               docker push "$IMG_NAME:latest"
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - |
               git remote add up $GIT_PATH
               git remote -v
               git checkout master
            - |
               git pull --tags
               if git tag -d $REL_VER; then
                 git push --delete up $REL_VER
               fi
            - |
               git checkout $REPO_COMMIT
               git tag $REL_VER
               git push up $REL_VER
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "TAG_COMMIT_SHA=$REPO_COMMIT" "TAG_IMG=$REL_VER"

  - name: u16javall_x8664_tag
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: prod_release
      - IN: u16javall_dd_repo
        switch: off
      - IN: u16javall_dd_img
        switch: off
      - IN: shipit_gh_ssh
        switch: off
      - TASK:
          name: u16javall_tag
          runtime:
            options:
              env:
                - RES_VER: "prod_release"
                - RES_IMG: "u16javall_dd_img"
                - RES_REPO: "u16javall_dd_repo"
                - GIT_PATH: "git@github.com:dry-dock/u16javall.git"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$RES_VER" "versionName")
            - |
               REPO_COMMIT=$(shipctl get_resource_version_key "$RES_IMG" "IMG_REPO_COMMIT_SHA")
               IMG_NAME=$(shipctl get_resource_version_key "$RES_IMG" "sourceName")
               UP_IMG_TAG=$(shipctl get_resource_version_key "$RES_IMG" "versionName")
               DH_USR_NAME=$(shipctl get_integration_resource_field "$RES_IMG" "userName")
               DH_PASS=$(shipctl get_integration_resource_field "$RES_IMG" "password")
            - |
               pushd $(shipctl get_resource_meta "shipit_gh_ssh")
                 cat "integration.json"  | jq -r '.privateKey' > gh_ssh.key
                 chmod 600 gh_ssh.key
                 ssh-add gh_ssh.key
               popd
            - docker login -u $DH_USR_NAME -p $DH_PASS
            - docker pull "$IMG_NAME:$UP_IMG_TAG"
            - |
               docker tag "$IMG_NAME:$UP_IMG_TAG" "$IMG_NAME:$REL_VER"
               docker push "$IMG_NAME:$REL_VER"
            - |
               docker tag "$IMG_NAME:$UP_IMG_TAG" "$IMG_NAME:latest"
               docker push "$IMG_NAME:latest"
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - |
               git remote add up $GIT_PATH
               git remote -v
               git checkout master
            - |
               git pull --tags
               if git tag -d $REL_VER; then
                 git push --delete up $REL_VER
               fi
            - |
               git checkout $REPO_COMMIT
               git tag $REL_VER
               git push up $REL_VER
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "TAG_COMMIT_SHA=$REPO_COMMIT" "TAG_IMG=$REL_VER"

  - name: u16cppall_x8664_tag
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: prod_release
      - IN: u16cppall_dd_repo
        switch: off
      - IN: u16cppall_dd_img
        switch: off
      - IN: shipit_gh_ssh
        switch: off
      - TASK:
          name: u16cppall_tag
          runtime:
            options:
              env:
                - RES_VER: "prod_release"
                - RES_IMG: "u16cppall_dd_img"
                - RES_REPO: "u16cppall_dd_repo"
                - GIT_PATH: "git@github.com:dry-dock/u16cppall.git"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$RES_VER" "versionName")
            - |
               REPO_COMMIT=$(shipctl get_resource_version_key "$RES_IMG" "IMG_REPO_COMMIT_SHA")
               IMG_NAME=$(shipctl get_resource_version_key "$RES_IMG" "sourceName")
               UP_IMG_TAG=$(shipctl get_resource_version_key "$RES_IMG" "versionName")
               DH_USR_NAME=$(shipctl get_integration_resource_field "$RES_IMG" "userName")
               DH_PASS=$(shipctl get_integration_resource_field "$RES_IMG" "password")
            - |
               pushd $(shipctl get_resource_meta "shipit_gh_ssh")
                 cat "integration.json"  | jq -r '.privateKey' > gh_ssh.key
                 chmod 600 gh_ssh.key
                 ssh-add gh_ssh.key
               popd
            - docker login -u $DH_USR_NAME -p $DH_PASS
            - docker pull "$IMG_NAME:$UP_IMG_TAG"
            - |
               docker tag "$IMG_NAME:$UP_IMG_TAG" "$IMG_NAME:$REL_VER"
               docker push "$IMG_NAME:$REL_VER"
            - |
               docker tag "$IMG_NAME:$UP_IMG_TAG" "$IMG_NAME:latest"
               docker push "$IMG_NAME:latest"
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - |
               git remote add up $GIT_PATH
               git remote -v
               git checkout master
            - |
               git pull --tags
               if git tag -d $REL_VER; then
                 git push --delete up $REL_VER
               fi
            - |
               git checkout $REPO_COMMIT
               git tag $REL_VER
               git push up $REL_VER
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "TAG_COMMIT_SHA=$REPO_COMMIT" "TAG_IMG=$REL_VER"

  - name: u16cloall_x8664_tag
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: prod_release
      - IN: u16cloall_dd_repo
        switch: off
      - IN: u16cloall_dd_img
        switch: off
      - IN: shipit_gh_ssh
        switch: off
      - TASK:
          name: u16cloall_tag
          runtime:
            options:
              env:
                - RES_VER: "prod_release"
                - RES_IMG: "u16cloall_dd_img"
                - RES_REPO: "u16cloall_dd_repo"
                - GIT_PATH: "git@github.com:dry-dock/u16cloall.git"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$RES_VER" "versionName")
            - |
               REPO_COMMIT=$(shipctl get_resource_version_key "$RES_IMG" "IMG_REPO_COMMIT_SHA")
               IMG_NAME=$(shipctl get_resource_version_key "$RES_IMG" "sourceName")
               UP_IMG_TAG=$(shipctl get_resource_version_key "$RES_IMG" "versionName")
               DH_USR_NAME=$(shipctl get_integration_resource_field "$RES_IMG" "userName")
               DH_PASS=$(shipctl get_integration_resource_field "$RES_IMG" "password")
            - |
               pushd $(shipctl get_resource_meta "shipit_gh_ssh")
                 cat "integration.json"  | jq -r '.privateKey' > gh_ssh.key
                 chmod 600 gh_ssh.key
                 ssh-add gh_ssh.key
               popd
            - docker login -u $DH_USR_NAME -p $DH_PASS
            - docker pull "$IMG_NAME:$UP_IMG_TAG"
            - |
               docker tag "$IMG_NAME:$UP_IMG_TAG" "$IMG_NAME:$REL_VER"
               docker push "$IMG_NAME:$REL_VER"
            - |
               docker tag "$IMG_NAME:$UP_IMG_TAG" "$IMG_NAME:latest"
               docker push "$IMG_NAME:latest"
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - |
               git remote add up $GIT_PATH
               git remote -v
               git checkout master
            - |
               git pull --tags
               if git tag -d $REL_VER; then
                 git push --delete up $REL_VER
               fi
            - |
               git checkout $REPO_COMMIT
               git tag $REL_VER
               git push up $REL_VER
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "TAG_COMMIT_SHA=$REPO_COMMIT" "TAG_IMG=$REL_VER"

  - name: u16golall_x8664_tag
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: prod_release
      - IN: u16golall_dd_repo
        switch: off
      - IN: u16golall_dd_img
        switch: off
      - IN: shipit_gh_ssh
        switch: off
      - TASK:
          name: u16golall_tag
          runtime:
            options:
              env:
                - RES_VER: "prod_release"
                - RES_IMG: "u16golall_dd_img"
                - RES_REPO: "u16golall_dd_repo"
                - GIT_PATH: "git@github.com:dry-dock/u16golall.git"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$RES_VER" "versionName")
            - |
               REPO_COMMIT=$(shipctl get_resource_version_key "$RES_IMG" "IMG_REPO_COMMIT_SHA")
               IMG_NAME=$(shipctl get_resource_version_key "$RES_IMG" "sourceName")
               UP_IMG_TAG=$(shipctl get_resource_version_key "$RES_IMG" "versionName")
               DH_USR_NAME=$(shipctl get_integration_resource_field "$RES_IMG" "userName")
               DH_PASS=$(shipctl get_integration_resource_field "$RES_IMG" "password")
            - |
               pushd $(shipctl get_resource_meta "shipit_gh_ssh")
                 cat "integration.json"  | jq -r '.privateKey' > gh_ssh.key
                 chmod 600 gh_ssh.key
                 ssh-add gh_ssh.key
               popd
            - docker login -u $DH_USR_NAME -p $DH_PASS
            - docker pull "$IMG_NAME:$UP_IMG_TAG"
            - |
               docker tag "$IMG_NAME:$UP_IMG_TAG" "$IMG_NAME:$REL_VER"
               docker push "$IMG_NAME:$REL_VER"
            - |
               docker tag "$IMG_NAME:$UP_IMG_TAG" "$IMG_NAME:latest"
               docker push "$IMG_NAME:latest"
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - |
               git remote add up $GIT_PATH
               git remote -v
               git checkout master
            - |
               git pull --tags
               if git tag -d $REL_VER; then
                 git push --delete up $REL_VER
               fi
            - |
               git checkout $REPO_COMMIT
               git tag $REL_VER
               git push up $REL_VER
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "TAG_COMMIT_SHA=$REPO_COMMIT" "TAG_IMG=$REL_VER"

  - name: u16scaall_x8664_tag
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: prod_release
      - IN: u16scaall_dd_repo
        switch: off
      - IN: u16scaall_dd_img
        switch: off
      - IN: shipit_gh_ssh
        switch: off
      - TASK:
          name: u16scaall_tag
          runtime:
            options:
              env:
                - RES_VER: "prod_release"
                - RES_IMG: "u16scaall_dd_img"
                - RES_REPO: "u16scaall_dd_repo"
                - GIT_PATH: "git@github.com:dry-dock/u16scaall.git"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$RES_VER" "versionName")
            - |
               REPO_COMMIT=$(shipctl get_resource_version_key "$RES_IMG" "IMG_REPO_COMMIT_SHA")
               IMG_NAME=$(shipctl get_resource_version_key "$RES_IMG" "sourceName")
               UP_IMG_TAG=$(shipctl get_resource_version_key "$RES_IMG" "versionName")
               DH_USR_NAME=$(shipctl get_integration_resource_field "$RES_IMG" "userName")
               DH_PASS=$(shipctl get_integration_resource_field "$RES_IMG" "password")
            - |
               pushd $(shipctl get_resource_meta "shipit_gh_ssh")
                 cat "integration.json"  | jq -r '.privateKey' > gh_ssh.key
                 chmod 600 gh_ssh.key
                 ssh-add gh_ssh.key
               popd
            - docker login -u $DH_USR_NAME -p $DH_PASS
            - docker pull "$IMG_NAME:$UP_IMG_TAG"
            - |
               docker tag "$IMG_NAME:$UP_IMG_TAG" "$IMG_NAME:$REL_VER"
               docker push "$IMG_NAME:$REL_VER"
            - |
               docker tag "$IMG_NAME:$UP_IMG_TAG" "$IMG_NAME:latest"
               docker push "$IMG_NAME:latest"
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - |
               git remote add up $GIT_PATH
               git remote -v
               git checkout master
            - |
               git pull --tags
               if git tag -d $REL_VER; then
                 git push --delete up $REL_VER
               fi
            - |
               git checkout $REPO_COMMIT
               git tag $REL_VER
               git push up $REL_VER
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "TAG_COMMIT_SHA=$REPO_COMMIT" "TAG_IMG=$REL_VER"

  - name: u16ruball_x8664_tag
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: prod_release
      - IN: u16ruball_dd_repo
        switch: off
      - IN: u16ruball_dd_img
        switch: off
      - IN: shipit_gh_ssh
        switch: off
      - TASK:
          name: u16ruball_tag
          runtime:
            options:
              env:
                - RES_VER: "prod_release"
                - RES_IMG: "u16ruball_dd_img"
                - RES_REPO: "u16ruball_dd_repo"
                - GIT_PATH: "git@github.com:dry-dock/u16ruball.git"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$RES_VER" "versionName")
            - |
               REPO_COMMIT=$(shipctl get_resource_version_key "$RES_IMG" "IMG_REPO_COMMIT_SHA")
               IMG_NAME=$(shipctl get_resource_version_key "$RES_IMG" "sourceName")
               UP_IMG_TAG=$(shipctl get_resource_version_key "$RES_IMG" "versionName")
               DH_USR_NAME=$(shipctl get_integration_resource_field "$RES_IMG" "userName")
               DH_PASS=$(shipctl get_integration_resource_field "$RES_IMG" "password")
            - |
               pushd $(shipctl get_resource_meta "shipit_gh_ssh")
                 cat "integration.json"  | jq -r '.privateKey' > gh_ssh.key
                 chmod 600 gh_ssh.key
                 ssh-add gh_ssh.key
               popd
            - docker login -u $DH_USR_NAME -p $DH_PASS
            - docker pull "$IMG_NAME:$UP_IMG_TAG"
            - |
               docker tag "$IMG_NAME:$UP_IMG_TAG" "$IMG_NAME:$REL_VER"
               docker push "$IMG_NAME:$REL_VER"
            - |
               docker tag "$IMG_NAME:$UP_IMG_TAG" "$IMG_NAME:latest"
               docker push "$IMG_NAME:latest"
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - |
               git remote add up $GIT_PATH
               git remote -v
               git checkout master
            - |
               git pull --tags
               if git tag -d $REL_VER; then
                 git push --delete up $REL_VER
               fi
            - |
               git checkout $REPO_COMMIT
               git tag $REL_VER
               git push up $REL_VER
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "TAG_COMMIT_SHA=$REPO_COMMIT" "TAG_IMG=$REL_VER"

  - name: u16phpall_x8664_tag
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: prod_release
      - IN: u16phpall_dd_repo
        switch: off
      - IN: u16phpall_dd_img
        switch: off
      - IN: shipit_gh_ssh
        switch: off
      - TASK:
          name: u16phpall_tag
          runtime:
            options:
              env:
                - RES_VER: "prod_release"
                - RES_IMG: "u16phpall_dd_img"
                - RES_REPO: "u16phpall_dd_repo"
                - GIT_PATH: "git@github.com:dry-dock/u16phpall.git"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$RES_VER" "versionName")
            - |
               REPO_COMMIT=$(shipctl get_resource_version_key "$RES_IMG" "IMG_REPO_COMMIT_SHA")
               IMG_NAME=$(shipctl get_resource_version_key "$RES_IMG" "sourceName")
               UP_IMG_TAG=$(shipctl get_resource_version_key "$RES_IMG" "versionName")
               DH_USR_NAME=$(shipctl get_integration_resource_field "$RES_IMG" "userName")
               DH_PASS=$(shipctl get_integration_resource_field "$RES_IMG" "password")
            - |
               pushd $(shipctl get_resource_meta "shipit_gh_ssh")
                 cat "integration.json"  | jq -r '.privateKey' > gh_ssh.key
                 chmod 600 gh_ssh.key
                 ssh-add gh_ssh.key
               popd
            - docker login -u $DH_USR_NAME -p $DH_PASS
            - docker pull "$IMG_NAME:$UP_IMG_TAG"
            - |
               docker tag "$IMG_NAME:$UP_IMG_TAG" "$IMG_NAME:$REL_VER"
               docker push "$IMG_NAME:$REL_VER"
            - |
               docker tag "$IMG_NAME:$UP_IMG_TAG" "$IMG_NAME:latest"
               docker push "$IMG_NAME:latest"
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - |
               git remote add up $GIT_PATH
               git remote -v
               git checkout master
            - |
               git pull --tags
               if git tag -d $REL_VER; then
                 git push --delete up $REL_VER
               fi
            - |
               git checkout $REPO_COMMIT
               git tag $REL_VER
               git push up $REL_VER
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "TAG_COMMIT_SHA=$REPO_COMMIT" "TAG_IMG=$REL_VER"

  - name: u16microbase_x8664_tag
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: prod_release
      - IN: u16microbase_dd_repo
        switch: off
      - IN: u16microbase_dd_img
        switch: off
      - IN: shipit_gh_ssh
        switch: off
      - TASK:
          name: u16microbase_tag
          runtime:
            options:
              env:
                - RES_VER: "prod_release"
                - RES_IMG: "u16microbase_dd_img"
                - RES_REPO: "u16microbase_dd_repo"
                - GIT_PATH: "git@github.com:dry-dock/u16microbase.git"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$RES_VER" "versionName")
            - |
               REPO_COMMIT=$(shipctl get_resource_version_key "$RES_IMG" "IMG_REPO_COMMIT_SHA")
               IMG_NAME=$(shipctl get_resource_version_key "$RES_IMG" "sourceName")
               UP_IMG_TAG=$(shipctl get_resource_version_key "$RES_IMG" "versionName")
               DH_USR_NAME=$(shipctl get_integration_resource_field "$RES_IMG" "userName")
               DH_PASS=$(shipctl get_integration_resource_field "$RES_IMG" "password")
            - |
               pushd $(shipctl get_resource_meta "shipit_gh_ssh")
                 cat "integration.json"  | jq -r '.privateKey' > gh_ssh.key
                 chmod 600 gh_ssh.key
                 ssh-add gh_ssh.key
               popd
            - docker login -u $DH_USR_NAME -p $DH_PASS
            - docker pull "$IMG_NAME:$UP_IMG_TAG"
            - |
               docker tag "$IMG_NAME:$UP_IMG_TAG" "$IMG_NAME:$REL_VER"
               docker push "$IMG_NAME:$REL_VER"
            - |
               docker tag "$IMG_NAME:$UP_IMG_TAG" "$IMG_NAME:latest"
               docker push "$IMG_NAME:latest"
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - |
               git remote add up $GIT_PATH
               git remote -v
               git checkout master
            - |
               git pull --tags
               if git tag -d $REL_VER; then
                 git push --delete up $REL_VER
               fi
            - |
               git checkout $REPO_COMMIT
               git tag $REL_VER
               git push up $REL_VER
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "TAG_COMMIT_SHA=$REPO_COMMIT" "TAG_IMG=$REL_VER"

  - name: u16admiral_tag
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: prod_release
      - IN: admiral_sh_repo
        switch: off
      - IN: u16admiral_sh_img
        switch: off
      - IN: shipit_gh_ssh
        switch: off
      - IN: shipit_bits_access_cli
        switch: off
        scopes:
          - ecr
      - TASK:
          name: u16_tag
          runtime:
            options:
              env:
                - RES_VER: "prod_release"
                - RES_IMG: "u16admiral_sh_img"
                - RES_REPO: "admiral_sh_repo"
                - GIT_PATH: "git@github.com:Shippable/admiral.git"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$RES_VER" "versionName")
            - |
               IMG_NAME=$(shipctl get_resource_version_key "$RES_IMG" "sourceName")
               UP_IMG_TAG=$(shipctl get_resource_version_key "$RES_IMG" "versionName")
            - |
               pushd $(shipctl get_resource_meta "shipit_gh_ssh")
                 cat "integration.json"  | jq -r '.privateKey' > gh_ssh.key
                 chmod 600 gh_ssh.key
                 ssh-add gh_ssh.key
               popd
            - docker pull "$IMG_NAME:$UP_IMG_TAG"
            - |
               docker tag "$IMG_NAME:$UP_IMG_TAG" "$IMG_NAME:$REL_VER"
               docker push "$IMG_NAME:$REL_VER"
            - |
               docker tag "$IMG_NAME:$UP_IMG_TAG" "$IMG_NAME:latest"
               docker push "$IMG_NAME:latest"
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - |
               git remote add up $GIT_PATH
               git remote -v
               git checkout master
            - |
               git pull --tags
               if git tag -d $REL_VER; then
                 git push --delete up $REL_VER
               fi
            - |
               local template_file="releaseNotes/template.md"
               local master_notes="releaseNotes/master.md"
               local new_notes="releaseNotes/$REL_VER.md"
               shipctl replace $master_notes
               cp $master_notes $new_notes
               cp $template_file $master_notes
               git add .
               git commit -m "updating version.txt to $RES_VER_NAME and adding release notes" || true
               git push up master
            - |
               REPO_COMMIT=$(git rev-parse HEAD)
               git tag $REL_VER
               git push up $REL_VER
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "TAG_COMMIT_SHA=$REPO_COMMIT" "TAG_IMG=$REL_VER"

  - name: u14admiral_tag
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: prod_release
      - IN: u14admiral_sh_img
        switch: off
      - IN: shipit_bits_access_cli
        switch: off
        scopes:
          - ecr
      - TASK:
          name: u14_tag
          runtime:
            options:
              env:
                - RES_VER: "prod_release"
                - RES_IMG: "u14admiral_sh_img"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$RES_VER" "versionName")
            - REPO_COMMIT=$(shipctl get_resource_version_key "$RES_IMG" "shaData.commitSha")
            - |
               IMG_NAME=$(shipctl get_resource_version_key "$RES_IMG" "sourceName")
               UP_IMG_TAG=$(shipctl get_resource_version_key "$RES_IMG" "versionName")
            - docker pull "$IMG_NAME:$UP_IMG_TAG"
            - |
               docker tag "$IMG_NAME:$UP_IMG_TAG" "$IMG_NAME:$REL_VER"
               docker push "$IMG_NAME:$REL_VER"
            - |
               docker tag "$IMG_NAME:$UP_IMG_TAG" "$IMG_NAME:latest"
               docker push "$IMG_NAME:latest"
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "TAG_COMMIT_SHA=$REPO_COMMIT" "TAG_IMG=$REL_VER"

  - name: execTemplates_repo_tag
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: prod_release
      - IN: execTemplates_sh_repo
        switch: off
      - IN: shipit_gh_ssh
        switch: off
      - IN: shipit_bits_access_cli
        switch: off
        scopes:
          - ecr
      - TASK:
          name: execTemplates_tag
          runtime:
            options:
              env:
                - RES_VER: "prod_release"
                - RES_REPO: "execTemplates_sh_repo"
                - GIT_PATH: "git@github.com:Shippable/execTemplates.git"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$RES_VER" "versionName")
            - REPO_COMMIT=$(shipctl get_resource_version_key "$RES_REPO" "shaData.commitSha")
            - |
               pushd $(shipctl get_resource_meta "shipit_gh_ssh")
                 cat "integration.json"  | jq -r '.privateKey' > gh_ssh.key
                 chmod 600 gh_ssh.key
                 ssh-add gh_ssh.key
               popd
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - |
               git remote add up $GIT_PATH
               git remote -v
               git checkout master
            - |
               git pull --tags
               if git tag -d $REL_VER; then
                 git push --delete up $REL_VER
               fi
            - |
               git checkout $REPO_COMMIT
               git tag $REL_VER
               git push up $REL_VER
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "TAG_COMMIT_SHA=$REPO_COMMIT"

  - name: node_repo_tag
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: prod_release
      - IN: node_sh_repo
        switch: off
      - IN: shipit_gh_ssh
        switch: off
      - IN: shipit_bits_access_cli
        switch: off
        scopes:
          - ecr
      - TASK:
          name: node_tag
          runtime:
            options:
              env:
                - RES_VER: "prod_release"
                - RES_REPO: "node_sh_repo"
                - GIT_PATH: "git@github.com:Shippable/node.git"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$RES_VER" "versionName")
            - REPO_COMMIT=$(shipctl get_resource_version_key "$RES_REPO" "shaData.commitSha")
            - |
               pushd $(shipctl get_resource_meta "shipit_gh_ssh")
                 cat "integration.json"  | jq -r '.privateKey' > gh_ssh.key
                 chmod 600 gh_ssh.key
                 ssh-add gh_ssh.key
               popd
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - |
               git remote add up $GIT_PATH
               git remote -v
               git checkout master
            - |
               git pull --tags
               if git tag -d $REL_VER; then
                 git push --delete up $REL_VER
               fi
            - |
               git checkout $REPO_COMMIT
               git tag $REL_VER
               git push up $REL_VER
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "TAG_COMMIT_SHA=$REPO_COMMIT"

  - name: cexec_repo_tag
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: prod_release
      - IN: cexec_sh_repo
        switch: off
      - IN: shipit_gh_ssh
        switch: off
      - IN: shipit_bits_access_cli
        switch: off
        scopes:
          - ecr
      - TASK:
          name: cexec_tag
          runtime:
            options:
              env:
                - RES_VER: "prod_release"
                - RES_REPO: "cexec_sh_repo"
                - GIT_PATH: "git@github.com:Shippable/cexec.git"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$RES_VER" "versionName")
            - REPO_COMMIT=$(shipctl get_resource_version_key "$RES_REPO" "shaData.commitSha")
            - |
               pushd $(shipctl get_resource_meta "shipit_gh_ssh")
                 cat "integration.json"  | jq -r '.privateKey' > gh_ssh.key
                 chmod 600 gh_ssh.key
                 ssh-add gh_ssh.key
               popd
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - |
               git remote add up $GIT_PATH
               git remote -v
               git checkout master
            - |
               git pull --tags
               if git tag -d $REL_VER; then
                 git push --delete up $REL_VER
               fi
            - |
               git checkout $REPO_COMMIT
               git tag $REL_VER
               git push up $REL_VER
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "TAG_COMMIT_SHA=$REPO_COMMIT"

  - name: reqExec_repo_tag
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: prod_release
      - IN: reqExec_sh_repo
        switch: off
      - IN: shipit_gh_ssh
        switch: off
      - IN: shipit_bits_access_cli
        switch: off
        scopes:
          - ecr
      - TASK:
          name: reqExec_tag
          runtime:
            options:
              env:
                - RES_VER: "prod_release"
                - RES_REPO: "reqExec_sh_repo"
                - GIT_PATH: "git@github.com:Shippable/reqExec.git"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$RES_VER" "versionName")
            - REPO_COMMIT=$(shipctl get_resource_version_key "$RES_REPO" "shaData.commitSha")
            - |
               pushd $(shipctl get_resource_meta "shipit_gh_ssh")
                 cat "integration.json"  | jq -r '.privateKey' > gh_ssh.key
                 chmod 600 gh_ssh.key
                 ssh-add gh_ssh.key
               popd
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - |
               git remote add up $GIT_PATH
               git remote -v
               git checkout master
            - |
               git pull --tags
               if git tag -d $REL_VER; then
                 git push --delete up $REL_VER
               fi
            - |
               git checkout $REPO_COMMIT
               git tag $REL_VER
               git push up $REL_VER
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "TAG_COMMIT_SHA=$REPO_COMMIT"

  - name: reqProc_repo_tag
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: prod_release
      - IN: reqProc_sh_repo
        switch: off
      - IN: shipit_gh_ssh
        switch: off
      - IN: shipit_bits_access_cli
        switch: off
        scopes:
          - ecr
      - TASK:
          name: reqProc_tag
          runtime:
            options:
              env:
                - RES_VER: "prod_release"
                - RES_REPO: "reqProc_sh_repo"
                - GIT_PATH: "git@github.com:Shippable/reqProc.git"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$RES_VER" "versionName")
            - REPO_COMMIT=$(shipctl get_resource_version_key "$RES_REPO" "shaData.commitSha")
            - |
               pushd $(shipctl get_resource_meta "shipit_gh_ssh")
                 cat "integration.json"  | jq -r '.privateKey' > gh_ssh.key
                 chmod 600 gh_ssh.key
                 ssh-add gh_ssh.key
               popd
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - |
               git remote add up $GIT_PATH
               git remote -v
               git checkout master
            - |
               git pull --tags
               if git tag -d $REL_VER; then
                 git push --delete up $REL_VER
               fi
            - |
               git checkout $REPO_COMMIT
               git tag $REL_VER
               git push up $REL_VER
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "TAG_COMMIT_SHA=$REPO_COMMIT"

  - name: reqKick_repo_tag
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: prod_release
      - IN: reqKick_sh_repo
        switch: off
      - IN: shipit_gh_ssh
        switch: off
      - IN: shipit_bits_access_cli
        switch: off
        scopes:
          - ecr
      - TASK:
          name: reqKick_tag
          runtime:
            options:
              env:
                - RES_VER: "prod_release"
                - RES_REPO: "reqKick_sh_repo"
                - GIT_PATH: "git@github.com:Shippable/reqKick.git"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$RES_VER" "versionName")
            - REPO_COMMIT=$(shipctl get_resource_version_key "$RES_REPO" "shaData.commitSha")
            - |
               pushd $(shipctl get_resource_meta "shipit_gh_ssh")
                 cat "integration.json"  | jq -r '.privateKey' > gh_ssh.key
                 chmod 600 gh_ssh.key
                 ssh-add gh_ssh.key
               popd
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - |
               git remote add up $GIT_PATH
               git remote -v
               git checkout master
            - |
               git pull --tags
               if git tag -d $REL_VER; then
                 git push --delete up $REL_VER
               fi
            - |
               git checkout $REPO_COMMIT
               git tag $REL_VER
               git push up $REL_VER
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "TAG_COMMIT_SHA=$REPO_COMMIT"
